{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar LRU = require('lru-cache');\n\nvar shebangCommand = require('shebang-command');\n\nvar shebangCache = new LRU({\n  max: 50,\n  maxAge: 30 * 1000\n}); // Cache just for 30sec\n\nfunction readShebang(command) {\n  var buffer;\n  var fd;\n  var shebang; // Check if it is in the cache first\n\n  if (shebangCache.has(command)) {\n    return shebangCache.get(command);\n  } // Read the first 150 bytes from the file\n\n\n  buffer = new Buffer(150);\n\n  try {\n    fd = fs.openSync(command, 'r');\n    fs.readSync(fd, buffer, 0, 150, 0);\n    fs.closeSync(fd);\n  } catch (e) {\n    /* empty */\n  } // Attempt to extract shebang (null is returned if not a shebang)\n\n\n  shebang = shebangCommand(buffer.toString()); // Store the shebang in the cache\n\n  shebangCache.set(command, shebang);\n  return shebang;\n}\n\nmodule.exports = readShebang;","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/exec-buffer/node_modules/cross-spawn/lib/util/readShebang.js"],"names":["fs","require","LRU","shebangCommand","shebangCache","max","maxAge","readShebang","command","buffer","fd","shebang","has","get","Buffer","openSync","readSync","closeSync","e","toString","set","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA5B;;AAEA,IAAIG,YAAY,GAAG,IAAIF,GAAJ,CAAQ;AAAEG,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,KAAK;AAAxB,CAAR,CAAnB,C,CAA6D;;AAE7D,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC1B,MAAIC,MAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,OAAJ,CAH0B,CAK1B;;AACA,MAAIP,YAAY,CAACQ,GAAb,CAAiBJ,OAAjB,CAAJ,EAA+B;AAC3B,WAAOJ,YAAY,CAACS,GAAb,CAAiBL,OAAjB,CAAP;AACH,GARyB,CAU1B;;;AACAC,EAAAA,MAAM,GAAG,IAAIK,MAAJ,CAAW,GAAX,CAAT;;AAEA,MAAI;AACAJ,IAAAA,EAAE,GAAGV,EAAE,CAACe,QAAH,CAAYP,OAAZ,EAAqB,GAArB,CAAL;AACAR,IAAAA,EAAE,CAACgB,QAAH,CAAYN,EAAZ,EAAgBD,MAAhB,EAAwB,CAAxB,EAA2B,GAA3B,EAAgC,CAAhC;AACAT,IAAAA,EAAE,CAACiB,SAAH,CAAaP,EAAb;AACH,GAJD,CAIE,OAAOQ,CAAP,EAAU;AAAE;AAAa,GAjBD,CAmB1B;;;AACAP,EAAAA,OAAO,GAAGR,cAAc,CAACM,MAAM,CAACU,QAAP,EAAD,CAAxB,CApB0B,CAsB1B;;AACAf,EAAAA,YAAY,CAACgB,GAAb,CAAiBZ,OAAjB,EAA0BG,OAA1B;AAEA,SAAOA,OAAP;AACH;;AAEDU,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar LRU = require('lru-cache');\nvar shebangCommand = require('shebang-command');\n\nvar shebangCache = new LRU({ max: 50, maxAge: 30 * 1000 });  // Cache just for 30sec\n\nfunction readShebang(command) {\n    var buffer;\n    var fd;\n    var shebang;\n\n    // Check if it is in the cache first\n    if (shebangCache.has(command)) {\n        return shebangCache.get(command);\n    }\n\n    // Read the first 150 bytes from the file\n    buffer = new Buffer(150);\n\n    try {\n        fd = fs.openSync(command, 'r');\n        fs.readSync(fd, buffer, 0, 150, 0);\n        fs.closeSync(fd);\n    } catch (e) { /* empty */ }\n\n    // Attempt to extract shebang (null is returned if not a shebang)\n    shebang = shebangCommand(buffer.toString());\n\n    // Store the shebang in the cache\n    shebangCache.set(command, shebang);\n\n    return shebang;\n}\n\nmodule.exports = readShebang;\n"]},"metadata":{},"sourceType":"script"}