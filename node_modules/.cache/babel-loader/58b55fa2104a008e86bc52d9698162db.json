{"ast":null,"code":"'use strict';\n\nfunction escapeArgument(arg, quote) {\n  // Convert to string\n  arg = '' + arg; // If we are not going to quote the argument,\n  // escape shell metacharacters, including double and single quotes:\n\n  if (!quote) {\n    arg = arg.replace(/([()%!^<>&|;,\"'\\s])/g, '^$1');\n  } else {\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"'); // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n\n    arg = arg.replace(/(\\\\*)$/, '$1$1'); // All other backslashes occur literally\n    // Quote the whole thing:\n\n    arg = '\"' + arg + '\"';\n  }\n\n  return arg;\n}\n\nmodule.exports = escapeArgument;","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/exec-buffer/node_modules/cross-spawn/lib/util/escapeArgument.js"],"names":["escapeArgument","arg","quote","replace","module","exports"],"mappings":"AAAA;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,KAA7B,EAAoC;AAChC;AACAD,EAAAA,GAAG,GAAG,KAAKA,GAAX,CAFgC,CAIhC;AACA;;AACA,MAAI,CAACC,KAAL,EAAY;AACRD,IAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,sBAAZ,EAAoC,KAApC,CAAN;AACH,GAFD,MAEO;AACH;AACA;AACAF,IAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,SAAZ,EAAuB,SAAvB,CAAN,CAHG,CAKH;AACA;AACA;;AACAF,IAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAN,CARG,CAUH;AAEA;;AACAF,IAAAA,GAAG,GAAG,MAAMA,GAAN,GAAY,GAAlB;AACH;;AAED,SAAOA,GAAP;AACH;;AAEDG,MAAM,CAACC,OAAP,GAAiBL,cAAjB","sourcesContent":["'use strict';\n\nfunction escapeArgument(arg, quote) {\n    // Convert to string\n    arg = '' + arg;\n\n    // If we are not going to quote the argument,\n    // escape shell metacharacters, including double and single quotes:\n    if (!quote) {\n        arg = arg.replace(/([()%!^<>&|;,\"'\\s])/g, '^$1');\n    } else {\n        // Sequence of backslashes followed by a double quote:\n        // double up all the backslashes and escape the double quote\n        arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n        // Sequence of backslashes followed by the end of the string\n        // (which will become a double quote later):\n        // double up all the backslashes\n        arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n        // All other backslashes occur literally\n\n        // Quote the whole thing:\n        arg = '\"' + arg + '\"';\n    }\n\n    return arg;\n}\n\nmodule.exports = escapeArgument;\n"]},"metadata":{},"sourceType":"script"}