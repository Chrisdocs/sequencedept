{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\n\nconst ieee754 = require(\"ieee754\"); // Primitive types\n\n\nfunction dv(array) {\n  return new DataView(array.buffer, array.byteOffset);\n}\n/**\n * 8-bit unsigned integer\n */\n\n\nexports.UINT8 = {\n  len: 1,\n\n  get(array, offset) {\n    return dv(array).getUint8(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setUint8(offset, value);\n    return offset + 1;\n  }\n\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT16_LE = {\n  len: 2,\n\n  get(array, offset) {\n    return dv(array).getUint16(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setUint16(offset, value, true);\n    return offset + 2;\n  }\n\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT16_BE = {\n  len: 2,\n\n  get(array, offset) {\n    return dv(array).getUint16(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setUint16(offset, value);\n    return offset + 2;\n  }\n\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT24_LE = {\n  len: 3,\n\n  get(array, offset) {\n    const dataView = dv(array);\n    return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);\n  },\n\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint8(offset, value & 0xff);\n    dataView.setUint16(offset + 1, value >> 8, true);\n    return offset + 3;\n  }\n\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT24_BE = {\n  len: 3,\n\n  get(array, offset) {\n    const dataView = dv(array);\n    return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);\n  },\n\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint16(offset, value >> 8);\n    dataView.setUint8(offset + 2, value & 0xff);\n    return offset + 3;\n  }\n\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT32_LE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getUint32(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setUint32(offset, value, true);\n    return offset + 4;\n  }\n\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT32_BE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getUint32(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setUint32(offset, value);\n    return offset + 4;\n  }\n\n};\n/**\n * 8-bit signed integer\n */\n\nexports.INT8 = {\n  len: 1,\n\n  get(array, offset) {\n    return dv(array).getInt8(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setInt8(offset, value);\n    return offset + 2;\n  }\n\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\n\nexports.INT16_BE = {\n  len: 2,\n\n  get(array, offset) {\n    return dv(array).getInt16(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setInt16(offset, value);\n    return offset + 2;\n  }\n\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\n\nexports.INT16_LE = {\n  len: 2,\n\n  get(array, offset) {\n    return dv(array).getInt16(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setInt16(offset, value, true);\n    return offset + 2;\n  }\n\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\n\nexports.INT24_LE = {\n  len: 3,\n\n  get(array, offset) {\n    const unsigned = exports.UINT24_LE.get(array, offset);\n    return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n  },\n\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint8(offset, value & 0xff);\n    dataView.setUint16(offset + 1, value >> 8, true);\n    return offset + 3;\n  }\n\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\n\nexports.INT24_BE = {\n  len: 3,\n\n  get(array, offset) {\n    const unsigned = exports.UINT24_BE.get(array, offset);\n    return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n  },\n\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint16(offset, value >> 8);\n    dataView.setUint8(offset + 2, value & 0xff);\n    return offset + 3;\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_BE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getInt32(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setInt32(offset, value);\n    return offset + 4;\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_LE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getInt32(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setInt32(offset, value, true);\n    return offset + 4;\n  }\n\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT64_LE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getBigUint64(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setBigUint64(offset, value, true);\n    return offset + 8;\n  }\n\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\n\nexports.INT64_LE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getBigInt64(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setBigInt64(offset, value, true);\n    return offset + 8;\n  }\n\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT64_BE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getBigUint64(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setBigUint64(offset, value);\n    return offset + 8;\n  }\n\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\n\nexports.INT64_BE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getBigInt64(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setBigInt64(offset, value);\n    return offset + 8;\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\n\nexports.Float16_BE = {\n  len: 2,\n\n  get(dataView, offset) {\n    return ieee754.read(dataView, offset, false, 10, this.len);\n  },\n\n  put(dataView, offset, value) {\n    ieee754.write(dataView, value, offset, false, 10, this.len);\n    return offset + this.len;\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\n\nexports.Float16_LE = {\n  len: 2,\n\n  get(array, offset) {\n    return ieee754.read(array, offset, true, 10, this.len);\n  },\n\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, true, 10, this.len);\n    return offset + this.len;\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\n\nexports.Float32_BE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getFloat32(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setFloat32(offset, value);\n    return offset + 4;\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\n\nexports.Float32_LE = {\n  len: 4,\n\n  get(array, offset) {\n    return dv(array).getFloat32(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setFloat32(offset, value, true);\n    return offset + 4;\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\n\nexports.Float64_BE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getFloat64(offset);\n  },\n\n  put(array, offset, value) {\n    dv(array).setFloat64(offset, value);\n    return offset + 8;\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\n\nexports.Float64_LE = {\n  len: 8,\n\n  get(array, offset) {\n    return dv(array).getFloat64(offset, true);\n  },\n\n  put(array, offset, value) {\n    dv(array).setFloat64(offset, value, true);\n    return offset + 8;\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\n\nexports.Float80_BE = {\n  len: 10,\n\n  get(array, offset) {\n    return ieee754.read(array, offset, false, 63, this.len);\n  },\n\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, false, 63, this.len);\n    return offset + this.len;\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\n\nexports.Float80_LE = {\n  len: 10,\n\n  get(array, offset) {\n    return ieee754.read(array, offset, true, 63, this.len);\n  },\n\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, true, 63, this.len);\n    return offset + this.len;\n  }\n\n};\n/**\n * Ignore a given number of bytes\n */\n\nclass IgnoreType {\n  /**\n   * @param len number of bytes to ignore\n   */\n  constructor(len) {\n    this.len = len;\n  } // ToDo: don't read, but skip data\n\n\n  get(array, off) {}\n\n}\n\nexports.IgnoreType = IgnoreType;\n\nclass Uint8ArrayType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  get(array, offset) {\n    return array.subarray(offset, offset + this.len);\n  }\n\n}\n\nexports.Uint8ArrayType = Uint8ArrayType;\n\nclass BufferType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  get(buffer, off) {\n    return buffer.slice(off, off + this.len);\n  }\n\n}\n\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\n\nclass StringType {\n  constructor(len, encoding) {\n    this.len = len;\n    this.encoding = encoding;\n  }\n\n  get(uint8Array, offset) {\n    return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);\n  }\n\n}\n\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\n\nclass AnsiStringType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  static decode(buffer, offset, until) {\n    let str = '';\n\n    for (let i = offset; i < until; ++i) {\n      str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n    }\n\n    return str;\n  }\n\n  static inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n\n  static codePointToString(cp) {\n    if (cp <= 0xFFFF) {\n      return String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n\n  static singleByteDecoder(bite) {\n    if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n      return bite;\n    }\n\n    const codePoint = AnsiStringType.windows1252[bite - 0x80];\n\n    if (codePoint === null) {\n      throw Error('invaliding encoding');\n    }\n\n    return codePoint;\n  }\n\n  get(buffer, offset = 0) {\n    return AnsiStringType.decode(buffer, offset, offset + this.len);\n  }\n\n}\n\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/token-types/lib/index.js"],"names":["Object","defineProperty","exports","value","AnsiStringType","StringType","BufferType","Uint8ArrayType","IgnoreType","Float80_LE","Float80_BE","Float64_LE","Float64_BE","Float32_LE","Float32_BE","Float16_LE","Float16_BE","INT64_BE","UINT64_BE","INT64_LE","UINT64_LE","INT32_LE","INT32_BE","INT24_BE","INT24_LE","INT16_LE","INT16_BE","INT8","UINT32_BE","UINT32_LE","UINT24_BE","UINT24_LE","UINT16_BE","UINT16_LE","UINT8","ieee754","require","dv","array","DataView","buffer","byteOffset","len","get","offset","getUint8","put","setUint8","getUint16","setUint16","dataView","getUint32","setUint32","getInt8","setInt8","getInt16","setInt16","unsigned","getInt32","setInt32","getBigUint64","setBigUint64","getBigInt64","setBigInt64","read","write","getFloat32","setFloat32","getFloat64","setFloat64","constructor","off","subarray","slice","encoding","uint8Array","Buffer","from","toString","decode","until","str","i","codePointToString","singleByteDecoder","inRange","a","min","max","cp","String","fromCharCode","bite","codePoint","windows1252","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = require(\"ieee754\");\n// Primitive types\nfunction dv(array) {\n    return new DataView(array.buffer, array.byteOffset);\n}\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getUint8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint8(offset, value);\n        return offset + 1;\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getInt8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt8(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_LE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_BE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(dataView, offset) {\n        return ieee754.read(dataView, offset, false, 10, this.len);\n    },\n    put(dataView, offset, value) {\n        ieee754.write(dataView, value, offset, false, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 10, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, false, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, false, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(array, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass Uint8ArrayType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(array, offset) {\n        return array.subarray(offset, offset + this.len);\n    }\n}\nexports.Uint8ArrayType = Uint8ArrayType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, off) {\n        return buffer.slice(off, off + this.len);\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(uint8Array, offset) {\n        return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, offset, until) {\n        let str = '';\n        for (let i = offset; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buffer, offset = 0) {\n        return AnsiStringType.decode(buffer, offset, offset + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n"]},"metadata":{},"sourceType":"script"}