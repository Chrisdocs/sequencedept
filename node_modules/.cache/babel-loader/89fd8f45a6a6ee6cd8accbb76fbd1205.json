{"ast":null,"code":"import { promisify } from 'node:util';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n\n  return path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n  const ignores = gitIgnore();\n\n  for (const file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n\n  return ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n\n  return path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n\nconst getFile = async (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = await readFileP(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst normalizeOptions = ({\n  ignore = [],\n  cwd = slash(process.cwd())\n} = {}) => ({\n  ignore,\n  cwd\n});\n\nexport const isGitIgnored = async options => {\n  options = normalizeOptions(options);\n  const paths = await fastGlob('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredicate(ignores, options.cwd);\n};\nexport const isGitIgnoredSync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredicate(ignores, options.cwd);\n};","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/imagemin/node_modules/globby/gitignore.js"],"names":["promisify","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredicate","getFile","getFileSync","readFileSync","normalizeOptions","process","isGitIgnored","paths","concat","Promise","all","isGitIgnoredSync","sync"],"mappings":"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","sourcesContent":["import {promisify} from 'node:util';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git',\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath,\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd()),\n} = {}) => ({ignore, cwd});\n\nexport const isGitIgnored = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd,\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n\nexport const isGitIgnoredSync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd,\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n"]},"metadata":{},"sourceType":"module"}