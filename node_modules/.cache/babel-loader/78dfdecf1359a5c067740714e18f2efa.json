{"ast":null,"code":"import { Buffer } from 'node:buffer';\nimport execBuffer from 'exec-buffer';\nimport isCwebpReadable from 'is-cwebp-readable';\nimport cwebp from 'cwebp-bin';\n\nconst imageminWebp = (options = {}) => input => {\n  if (!Buffer.isBuffer(input)) {\n    return Promise.reject(new TypeError(`Expected \\`input\\` to be of type \\`Buffer\\` but received type \\`${typeof input}\\``));\n  }\n\n  if (!isCwebpReadable(input)) {\n    return Promise.resolve(input);\n  }\n\n  const args = ['-quiet', '-mt'];\n\n  if (options.preset) {\n    args.push('-preset', options.preset);\n  }\n\n  if (options.quality) {\n    args.push('-q', options.quality);\n  }\n\n  if (options.alphaQuality) {\n    args.push('-alpha_q', options.alphaQuality);\n  }\n\n  if (options.method) {\n    args.push('-m', options.method);\n  }\n\n  if (options.size > 0) {\n    args.push('-size', options.size);\n  }\n\n  if (options.sns) {\n    args.push('-sns', options.sns);\n  }\n\n  if (options.filter) {\n    args.push('-f', options.filter);\n  }\n\n  if (options.autoFilter) {\n    args.push('-af');\n  }\n\n  if (options.sharpness) {\n    args.push('-sharpness', options.sharpness);\n  }\n\n  if (options.lossless) {\n    args.push('-lossless');\n  }\n\n  if (options.nearLossless) {\n    args.push('-near_lossless', options.nearLossless);\n  }\n\n  if (options.crop) {\n    args.push('-crop', options.crop.x, options.crop.y, options.crop.width, options.crop.height);\n  }\n\n  if (options.resize) {\n    args.push('-resize', options.resize.width, options.resize.height);\n  }\n\n  if (options.metadata) {\n    args.push('-metadata', Array.isArray(options.metadata) ? options.metadata.join(',') : options.metadata);\n  }\n\n  args.push('-o', execBuffer.output, execBuffer.input);\n  return execBuffer({\n    args,\n    bin: cwebp,\n    input\n  }).catch(error => {\n    error.message = error.stderr || error.message;\n    throw error;\n  });\n};\n\nexport default imageminWebp;","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/imagemin-webp/index.js"],"names":["Buffer","execBuffer","isCwebpReadable","cwebp","imageminWebp","options","input","isBuffer","Promise","reject","TypeError","resolve","args","preset","push","quality","alphaQuality","method","size","sns","filter","autoFilter","sharpness","lossless","nearLossless","crop","x","y","width","height","resize","metadata","Array","isArray","join","output","bin","catch","error","message","stderr"],"mappings":"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","sourcesContent":["import {Buffer} from 'node:buffer';\nimport execBuffer from 'exec-buffer';\nimport isCwebpReadable from 'is-cwebp-readable';\nimport cwebp from 'cwebp-bin';\n\nconst imageminWebp = (options = {}) => input => {\n\tif (!Buffer.isBuffer(input)) {\n\t\treturn Promise.reject(new TypeError(`Expected \\`input\\` to be of type \\`Buffer\\` but received type \\`${typeof input}\\``));\n\t}\n\n\tif (!isCwebpReadable(input)) {\n\t\treturn Promise.resolve(input);\n\t}\n\n\tconst args = [\n\t\t'-quiet',\n\t\t'-mt',\n\t];\n\n\tif (options.preset) {\n\t\targs.push('-preset', options.preset);\n\t}\n\n\tif (options.quality) {\n\t\targs.push('-q', options.quality);\n\t}\n\n\tif (options.alphaQuality) {\n\t\targs.push('-alpha_q', options.alphaQuality);\n\t}\n\n\tif (options.method) {\n\t\targs.push('-m', options.method);\n\t}\n\n\tif (options.size > 0) {\n\t\targs.push('-size', options.size);\n\t}\n\n\tif (options.sns) {\n\t\targs.push('-sns', options.sns);\n\t}\n\n\tif (options.filter) {\n\t\targs.push('-f', options.filter);\n\t}\n\n\tif (options.autoFilter) {\n\t\targs.push('-af');\n\t}\n\n\tif (options.sharpness) {\n\t\targs.push('-sharpness', options.sharpness);\n\t}\n\n\tif (options.lossless) {\n\t\targs.push('-lossless');\n\t}\n\n\tif (options.nearLossless) {\n\t\targs.push('-near_lossless', options.nearLossless);\n\t}\n\n\tif (options.crop) {\n\t\targs.push('-crop', options.crop.x, options.crop.y, options.crop.width, options.crop.height);\n\t}\n\n\tif (options.resize) {\n\t\targs.push('-resize', options.resize.width, options.resize.height);\n\t}\n\n\tif (options.metadata) {\n\t\targs.push('-metadata', Array.isArray(options.metadata) ? options.metadata.join(',') : options.metadata);\n\t}\n\n\targs.push('-o', execBuffer.output, execBuffer.input);\n\n\treturn execBuffer({\n\t\targs,\n\t\tbin: cwebp,\n\t\tinput,\n\t}).catch(error => {\n\t\terror.message = error.stderr || error.message;\n\t\tthrow error;\n\t});\n};\n\nexport default imageminWebp;\n"]},"metadata":{},"sourceType":"module"}