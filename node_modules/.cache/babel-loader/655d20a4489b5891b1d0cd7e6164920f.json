{"ast":null,"code":"import * as React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = data => data instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst HookFormContext = React.createContext(null);\n\nconst useFormContext = () => React.useContext(HookFormContext);\n\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n  const _props = React.useRef(props);\n\n  _props.current = props;\n  React.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name,\n    exact\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: value => shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), value)),\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nvar isString = value => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact\n  } = props || {};\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n        const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n        updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: !isArrayField\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      if (isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name, {\n          keepDefaultValue: true\n        });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      onChange: event => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n    [keyName]: generateId()\n  }), value));\n};\n\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar omitKeys = (fields, keyName) => fields.map(function () {\n  let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return omit(field, keyName);\n});\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n\n  const _fieldIds = React.useRef(fields);\n\n  const _name = React.useRef(name);\n\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: _ref => {\n      let {\n        values,\n        name: fieldArrayName\n      } = _ref;\n\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    setFields(_fieldIds.current);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nfunction createSubject() {\n  let _observers = [];\n\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = observer => {\n    _observers.push(observer);\n\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nfunction markFieldsDirty(data) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref2) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref2;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref3 => {\n      let {\n        value\n      } = _ref3;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name\n  };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nvar isRegex = value => value instanceof RegExp;\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\n\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = _options.defaultValues || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, watched ? {} : fieldState));\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values\n      });\n\n      _subjects.array.next({\n        values\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref4) => {\n        let [key, value] = _ref4;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\n\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const _formControl = React.useRef();\n\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: value => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), value);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","_props","useRef","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","keepDefaultValue","getEventValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","useFieldArray","setFields","mapIds","_getFieldArray","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","appendValue","appendAt","mapCurrentIds","_updateFieldArray","argA","fillEmptyArray","getFocusFieldName","prependAt","remove","removeArrayAt","insertAt","argB","swap","swapArrayAt","move","moveArrayAt","update","updateAt","isWatched","_executeSchema","then","_updateValid","cloneObject","Set","createSubject","_observers","observer","push","o","observers","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","schemaErrorLookup","join","foundError","pop","isSubmitted","reValidateMode","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import * as React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module"}