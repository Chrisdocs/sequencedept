{"ast":null,"code":"import fs from 'node:fs';\nimport process from 'node:process';\nimport { fileURLToPath } from 'node:url';\nimport BinWrapper from 'bin-wrapper';\nconst pkg = JSON.parse(fs.readFileSync(new URL('../package.json', import.meta.url)));\nconst url = `https://raw.githubusercontent.com/imagemin/cwebp-bin/v${pkg.version}/vendor/`;\nconst binWrapper = new BinWrapper().src(`${url}osx/cwebp`, 'darwin').src(`${url}linux/x86/cwebp`, 'linux', 'x86').src(`${url}linux/x64/cwebp`, 'linux', 'x64').src(`${url}win/x64/cwebp.exe`, 'win32', 'x64').dest(fileURLToPath(new URL('../vendor', import.meta.url))).use(process.platform === 'win32' ? 'cwebp.exe' : 'cwebp');\nexport default binWrapper;","map":{"version":3,"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/cwebp-bin/lib/index.js"],"names":["fs","process","fileURLToPath","BinWrapper","pkg","JSON","parse","readFileSync","URL","import","meta","url","version","binWrapper","src","dest","use","platform"],"mappings":"AAAA,OAAOA,EAAP,MAAe,SAAf;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAAQC,aAAR,QAA4B,UAA5B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWN,EAAE,CAACO,YAAH,CAAgB,IAAIC,GAAJ,CAAQ,iBAAR,EAA2BC,MAAM,CAACC,IAAP,CAAYC,GAAvC,CAAhB,CAAX,CAAZ;AACA,MAAMA,GAAG,GAAI,yDAAwDP,GAAG,CAACQ,OAAQ,UAAjF;AAEA,MAAMC,UAAU,GAAG,IAAIV,UAAJ,GACjBW,GADiB,CACZ,GAAEH,GAAI,WADM,EACM,QADN,EAEjBG,GAFiB,CAEZ,GAAEH,GAAI,iBAFM,EAEY,OAFZ,EAEqB,KAFrB,EAGjBG,GAHiB,CAGZ,GAAEH,GAAI,iBAHM,EAGY,OAHZ,EAGqB,KAHrB,EAIjBG,GAJiB,CAIZ,GAAEH,GAAI,mBAJM,EAIc,OAJd,EAIuB,KAJvB,EAKjBI,IALiB,CAKZb,aAAa,CAAC,IAAIM,GAAJ,CAAQ,WAAR,EAAqBC,MAAM,CAACC,IAAP,CAAYC,GAAjC,CAAD,CALD,EAMjBK,GANiB,CAMbf,OAAO,CAACgB,QAAR,KAAqB,OAArB,GAA+B,WAA/B,GAA6C,OANhC,CAAnB;AAQA,eAAeJ,UAAf","sourcesContent":["import fs from 'node:fs';\nimport process from 'node:process';\nimport {fileURLToPath} from 'node:url';\nimport BinWrapper from 'bin-wrapper';\n\nconst pkg = JSON.parse(fs.readFileSync(new URL('../package.json', import.meta.url)));\nconst url = `https://raw.githubusercontent.com/imagemin/cwebp-bin/v${pkg.version}/vendor/`;\n\nconst binWrapper = new BinWrapper()\n\t.src(`${url}osx/cwebp`, 'darwin')\n\t.src(`${url}linux/x86/cwebp`, 'linux', 'x86')\n\t.src(`${url}linux/x64/cwebp`, 'linux', 'x64')\n\t.src(`${url}win/x64/cwebp.exe`, 'win32', 'x64')\n\t.dest(fileURLToPath(new URL('../vendor', import.meta.url)))\n\t.use(process.platform === 'win32' ? 'cwebp.exe' : 'cwebp');\n\nexport default binWrapper;\n"]},"metadata":{},"sourceType":"module"}