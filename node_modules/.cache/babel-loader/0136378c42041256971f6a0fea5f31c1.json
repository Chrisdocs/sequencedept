{"ast":null,"code":"/* eslint no-console: 0 */\n'use strict';\n\nconst urllib = require('url');\n\nconst util = require('util');\n\nconst fs = require('fs');\n\nconst nmfetch = require('../fetch');\n\nconst dns = require('dns');\n\nconst net = require('net');\n\nconst os = require('os');\n\nconst DNS_TTL = 5 * 60 * 1000;\nconst networkInterfaces = module.exports.networkInterfaces = os.networkInterfaces();\n\nconst isFamilySupported = family => {\n  const familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n  Object.keys(networkInterfaces).map(key => networkInterfaces[key]) // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n  .reduce((acc, val) => acc.concat(val), []).filter(i => !i.internal).filter(i => i.family === 'IPv' + family || i.family === family).length > 0;\n  return familySupported;\n};\n\nconst resolver = (family, hostname, callback) => {\n  const familySupported = isFamilySupported(family);\n\n  if (!familySupported) {\n    return callback(null, []);\n  }\n\n  dns['resolve' + family](hostname, (err, addresses) => {\n    if (err) {\n      switch (err.code) {\n        case dns.NODATA:\n        case dns.NOTFOUND:\n        case dns.NOTIMP:\n        case dns.SERVFAIL:\n        case dns.CONNREFUSED:\n        case 'EAI_AGAIN':\n          return callback(null, []);\n      }\n\n      return callback(err);\n    }\n\n    return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n  });\n};\n\nconst dnsCache = module.exports.dnsCache = new Map();\n\nconst formatDNSValue = (value, extra) => {\n  if (!value) {\n    return Object.assign({}, extra || {});\n  }\n\n  return Object.assign({\n    servername: value.servername,\n    host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n  }, extra || {});\n};\n\nmodule.exports.resolveHostname = (options, callback) => {\n  options = options || {};\n\n  if (!options.host && options.servername) {\n    options.host = options.servername;\n  }\n\n  if (!options.host || net.isIP(options.host)) {\n    // nothing to do here\n    let value = {\n      addresses: [options.host],\n      servername: options.servername || false\n    };\n    return callback(null, formatDNSValue(value, {\n      cached: false\n    }));\n  }\n\n  let cached;\n\n  if (dnsCache.has(options.host)) {\n    cached = dnsCache.get(options.host);\n\n    if (!cached.expires || cached.expires >= Date.now()) {\n      return callback(null, formatDNSValue(cached.value, {\n        cached: true\n      }));\n    }\n  }\n\n  resolver(4, options.host, (err, addresses) => {\n    if (err) {\n      if (cached) {\n        // ignore error, use expired value\n        return callback(null, formatDNSValue(cached.value, {\n          cached: true,\n          error: err\n        }));\n      }\n\n      return callback(err);\n    }\n\n    if (addresses && addresses.length) {\n      let value = {\n        addresses,\n        servername: options.servername || options.host\n      };\n      dnsCache.set(options.host, {\n        value,\n        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n      });\n      return callback(null, formatDNSValue(value, {\n        cached: false\n      }));\n    }\n\n    resolver(6, options.host, (err, addresses) => {\n      if (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n\n        return callback(err);\n      }\n\n      if (addresses && addresses.length) {\n        let value = {\n          addresses,\n          servername: options.servername || options.host\n        };\n        dnsCache.set(options.host, {\n          value,\n          expires: Date.now() + (options.dnsTtl || DNS_TTL)\n        });\n        return callback(null, formatDNSValue(value, {\n          cached: false\n        }));\n      }\n\n      try {\n        dns.lookup(options.host, {\n          all: true\n        }, (err, addresses) => {\n          if (err) {\n            if (cached) {\n              // ignore error, use expired value\n              return callback(null, formatDNSValue(cached.value, {\n                cached: true,\n                error: err\n              }));\n            }\n\n            return callback(err);\n          }\n\n          let address = addresses ? addresses.filter(addr => isFamilySupported(addr.family)).map(addr => addr.address).shift() : false;\n\n          if (addresses && addresses.length && !address) {\n            // there are addresses but none can be used\n            let err = new Error(`Can not use IPv${addresses[0].family} addresses with current network`);\n            return callback(err);\n          }\n\n          if (!address && cached) {\n            // nothing was found, fallback to cached value\n            return callback(null, formatDNSValue(cached.value, {\n              cached: true\n            }));\n          }\n\n          let value = {\n            addresses: address ? [address] : [options.host],\n            servername: options.servername || options.host\n          };\n          dnsCache.set(options.host, {\n            value,\n            expires: Date.now() + (options.dnsTtl || DNS_TTL)\n          });\n          return callback(null, formatDNSValue(value, {\n            cached: false\n          }));\n        });\n      } catch (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n\n        return callback(err);\n      }\n    });\n  });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\n\n\nmodule.exports.parseConnectionUrl = str => {\n  str = str || '';\n  let options = {};\n  [urllib.parse(str, true)].forEach(url => {\n    let auth;\n\n    switch (url.protocol) {\n      case 'smtp:':\n        options.secure = false;\n        break;\n\n      case 'smtps:':\n        options.secure = true;\n        break;\n\n      case 'direct:':\n        options.direct = true;\n        break;\n    }\n\n    if (!isNaN(url.port) && Number(url.port)) {\n      options.port = Number(url.port);\n    }\n\n    if (url.hostname) {\n      options.host = url.hostname;\n    }\n\n    if (url.auth) {\n      auth = url.auth.split(':');\n\n      if (!options.auth) {\n        options.auth = {};\n      }\n\n      options.auth.user = auth.shift();\n      options.auth.pass = auth.join(':');\n    }\n\n    Object.keys(url.query || {}).forEach(key => {\n      let obj = options;\n      let lKey = key;\n      let value = url.query[key];\n\n      if (!isNaN(value)) {\n        value = Number(value);\n      }\n\n      switch (value) {\n        case 'true':\n          value = true;\n          break;\n\n        case 'false':\n          value = false;\n          break;\n      } // tls is nested object\n\n\n      if (key.indexOf('tls.') === 0) {\n        lKey = key.substr(4);\n\n        if (!options.tls) {\n          options.tls = {};\n        }\n\n        obj = options.tls;\n      } else if (key.indexOf('.') >= 0) {\n        // ignore nested properties besides tls\n        return;\n      }\n\n      if (!(lKey in obj)) {\n        obj[lKey] = value;\n      }\n    });\n  });\n  return options;\n};\n\nmodule.exports._logFunc = function (logger, level, defaults, data, message) {\n  let entry = {};\n  Object.keys(defaults || {}).forEach(key => {\n    if (key !== 'level') {\n      entry[key] = defaults[key];\n    }\n  });\n  Object.keys(data || {}).forEach(key => {\n    if (key !== 'level') {\n      entry[key] = data[key];\n    }\n  });\n\n  for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n    args[_key - 5] = arguments[_key];\n  }\n\n  logger[level](entry, message, ...args);\n};\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\n\n\nmodule.exports.getLogger = (options, defaults) => {\n  options = options || {};\n  let response = {};\n  let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n  if (!options.logger) {\n    // use vanity logger\n    levels.forEach(level => {\n      response[level] = () => false;\n    });\n    return response;\n  }\n\n  let logger = options.logger;\n\n  if (options.logger === true) {\n    // create console logger\n    logger = createDefaultLogger(levels);\n  }\n\n  levels.forEach(level => {\n    response[level] = function (data, message) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      module.exports._logFunc(logger, level, defaults, data, message, ...args);\n    };\n  });\n  return response;\n};\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\n\n\nmodule.exports.callbackPromise = (resolve, reject) => function () {\n  let args = Array.from(arguments);\n  let err = args.shift();\n\n  if (err) {\n    reject(err);\n  } else {\n    resolve(...args);\n  }\n};\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\n\n\nmodule.exports.resolveContent = (data, key, callback) => {\n  let promise;\n\n  if (!callback) {\n    promise = new Promise((resolve, reject) => {\n      callback = module.exports.callbackPromise(resolve, reject);\n    });\n  }\n\n  let content = data && data[key] && data[key].content || data[key];\n  let contentStream;\n  let encoding = (typeof data[key] === 'object' && data[key].encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n\n  if (!content) {\n    return callback(null, content);\n  }\n\n  if (typeof content === 'object') {\n    if (typeof content.pipe === 'function') {\n      return resolveStream(content, (err, value) => {\n        if (err) {\n          return callback(err);\n        } // we can't stream twice the same content, so we need\n        // to replace the stream object with the streaming result\n\n\n        if (data[key].content) {\n          data[key].content = value;\n        } else {\n          data[key] = value;\n        }\n\n        callback(null, value);\n      });\n    } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n      contentStream = nmfetch(content.path || content.href);\n      return resolveStream(contentStream, callback);\n    } else if (/^data:/i.test(content.path || content.href)) {\n      let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n\n      if (!parts) {\n        return callback(null, Buffer.from(0));\n      }\n\n      return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));\n    } else if (content.path) {\n      return resolveStream(fs.createReadStream(content.path), callback);\n    }\n  }\n\n  if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n    content = Buffer.from(data[key].content, encoding);\n  } // default action, return as is\n\n\n  setImmediate(() => callback(null, content));\n  return promise;\n};\n/**\n * Copies properties from source objects to target objects\n */\n\n\nmodule.exports.assign = function\n  /* target, ... sources */\n() {\n  let args = Array.from(arguments);\n  let target = args.shift() || {};\n  args.forEach(source => {\n    Object.keys(source || {}).forEach(key => {\n      if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {\n        // tls and auth are special keys that need to be enumerated separately\n        // other objects are passed as is\n        if (!target[key]) {\n          // ensure that target has this key\n          target[key] = {};\n        }\n\n        Object.keys(source[key]).forEach(subKey => {\n          target[key][subKey] = source[key][subKey];\n        });\n      } else {\n        target[key] = source[key];\n      }\n    });\n  });\n  return target;\n};\n\nmodule.exports.encodeXText = str => {\n  // ! 0x21\n  // + 0x2B\n  // = 0x3D\n  // ~ 0x7E\n  if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n    return str;\n  }\n\n  let buf = Buffer.from(str);\n  let result = '';\n\n  for (let i = 0, len = buf.length; i < len; i++) {\n    let c = buf[i];\n\n    if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n      result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n    } else {\n      result += String.fromCharCode(c);\n    }\n  }\n\n  return result;\n};\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\n\n\nfunction resolveStream(stream, callback) {\n  let responded = false;\n  let chunks = [];\n  let chunklen = 0;\n  stream.on('error', err => {\n    if (responded) {\n      return;\n    }\n\n    responded = true;\n    callback(err);\n  });\n  stream.on('readable', () => {\n    let chunk;\n\n    while ((chunk = stream.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  stream.on('end', () => {\n    if (responded) {\n      return;\n    }\n\n    responded = true;\n    let value;\n\n    try {\n      value = Buffer.concat(chunks, chunklen);\n    } catch (E) {\n      return callback(E);\n    }\n\n    callback(null, value);\n  });\n}\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\n\n\nfunction createDefaultLogger(levels) {\n  let levelMaxLen = 0;\n  let levelNames = new Map();\n  levels.forEach(level => {\n    if (level.length > levelMaxLen) {\n      levelMaxLen = level.length;\n    }\n  });\n  levels.forEach(level => {\n    let levelName = level.toUpperCase();\n\n    if (levelName.length < levelMaxLen) {\n      levelName += ' '.repeat(levelMaxLen - levelName.length);\n    }\n\n    levelNames.set(level, levelName);\n  });\n\n  let print = function (level, entry, message) {\n    let prefix = '';\n\n    if (entry) {\n      if (entry.tnx === 'server') {\n        prefix = 'S: ';\n      } else if (entry.tnx === 'client') {\n        prefix = 'C: ';\n      }\n\n      if (entry.sid) {\n        prefix = '[' + entry.sid + '] ' + prefix;\n      }\n\n      if (entry.cid) {\n        prefix = '[#' + entry.cid + '] ' + prefix;\n      }\n    }\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      args[_key3 - 3] = arguments[_key3];\n    }\n\n    message = util.format(message, ...args);\n    message.split(/\\r?\\n/).forEach(line => {\n      console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n    });\n  };\n\n  let logger = {};\n  levels.forEach(level => {\n    logger[level] = print.bind(null, level);\n  });\n  return logger;\n}","map":{"version":3,"names":["urllib","require","util","fs","nmfetch","dns","net","os","DNS_TTL","networkInterfaces","module","exports","isFamilySupported","family","familySupported","Object","keys","map","key","reduce","acc","val","concat","filter","i","internal","length","resolver","hostname","callback","err","addresses","code","NODATA","NOTFOUND","NOTIMP","SERVFAIL","CONNREFUSED","Array","isArray","dnsCache","Map","formatDNSValue","value","extra","assign","servername","host","Math","floor","random","resolveHostname","options","isIP","cached","has","get","expires","Date","now","error","set","dnsTtl","lookup","all","address","addr","shift","Error","parseConnectionUrl","str","parse","forEach","url","auth","protocol","secure","direct","isNaN","port","Number","split","user","pass","join","query","obj","lKey","indexOf","substr","tls","_logFunc","logger","level","defaults","data","message","entry","args","getLogger","response","levels","createDefaultLogger","callbackPromise","resolve","reject","from","arguments","resolveContent","promise","Promise","content","contentStream","encoding","toString","toLowerCase","replace","pipe","resolveStream","test","path","href","parts","match","Buffer","decodeURIComponent","createReadStream","includes","setImmediate","target","source","subKey","encodeXText","buf","result","len","c","toUpperCase","String","fromCharCode","stream","responded","chunks","chunklen","on","chunk","read","push","E","levelMaxLen","levelNames","levelName","repeat","print","prefix","tnx","sid","cid","format","line","console","log","toISOString","bind"],"sources":["/Users/chriswolfe/Documents/webDev/Clients/SQ-DPT/my-app/node_modules/nodemailer/lib/shared/index.js"],"sourcesContent":["/* eslint no-console: 0 */\n\n'use strict';\n\nconst urllib = require('url');\nconst util = require('util');\nconst fs = require('fs');\nconst nmfetch = require('../fetch');\nconst dns = require('dns');\nconst net = require('net');\nconst os = require('os');\n\nconst DNS_TTL = 5 * 60 * 1000;\n\nconst networkInterfaces = (module.exports.networkInterfaces = os.networkInterfaces());\n\nconst isFamilySupported = family => {\n    const familySupported =\n        // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n        Object.keys(networkInterfaces)\n            .map(key => networkInterfaces[key])\n            // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n            .reduce((acc, val) => acc.concat(val), [])\n            .filter(i => !i.internal)\n            .filter(i => i.family === 'IPv' + family || i.family === family).length > 0;\n\n    return familySupported;\n};\n\nconst resolver = (family, hostname, callback) => {\n    const familySupported = isFamilySupported(family);\n\n    if (!familySupported) {\n        return callback(null, []);\n    }\n\n    dns['resolve' + family](hostname, (err, addresses) => {\n        if (err) {\n            switch (err.code) {\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case 'EAI_AGAIN':\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\n\nconst dnsCache = (module.exports.dnsCache = new Map());\n\nconst formatDNSValue = (value, extra) => {\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n\n    return Object.assign(\n        {\n            servername: value.servername,\n            host:\n                !value.addresses || !value.addresses.length\n                    ? null\n                    : value.addresses.length === 1\n                    ? value.addresses[0]\n                    : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n        },\n        extra || {}\n    );\n};\n\nmodule.exports.resolveHostname = (options, callback) => {\n    options = options || {};\n\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [options.host],\n            servername: options.servername || false\n        };\n        return callback(\n            null,\n            formatDNSValue(value, {\n                cached: false\n            })\n        );\n    }\n\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(\n                null,\n                formatDNSValue(cached.value, {\n                    cached: true\n                })\n            );\n        }\n    }\n\n    resolver(4, options.host, (err, addresses) => {\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(\n                    null,\n                    formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    })\n                );\n            }\n            return callback(err);\n        }\n\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n\n            return callback(\n                null,\n                formatDNSValue(value, {\n                    cached: false\n                })\n            );\n        }\n\n        resolver(6, options.host, (err, addresses) => {\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n\n                return callback(\n                    null,\n                    formatDNSValue(value, {\n                        cached: false\n                    })\n                );\n            }\n\n            try {\n                dns.lookup(options.host, { all: true }, (err, addresses) => {\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(\n                                null,\n                                formatDNSValue(cached.value, {\n                                    cached: true,\n                                    error: err\n                                })\n                            );\n                        }\n                        return callback(err);\n                    }\n\n                    let address = addresses\n                        ? addresses\n                              .filter(addr => isFamilySupported(addr.family))\n                              .map(addr => addr.address)\n                              .shift()\n                        : false;\n\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        let err = new Error(`Can not use IPv${addresses[0].family} addresses with current network`);\n                        return callback(err);\n                    }\n\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(\n                            null,\n                            formatDNSValue(cached.value, {\n                                cached: true\n                            })\n                        );\n                    }\n\n                    let value = {\n                        addresses: address ? [address] : [options.host],\n                        servername: options.servername || options.host\n                    };\n\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n\n                    return callback(\n                        null,\n                        formatDNSValue(value, {\n                            cached: false\n                        })\n                    );\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\nmodule.exports.parseConnectionUrl = str => {\n    str = str || '';\n    let options = {};\n\n    [urllib.parse(str, true)].forEach(url => {\n        let auth;\n\n        switch (url.protocol) {\n            case 'smtp:':\n                options.secure = false;\n                break;\n            case 'smtps:':\n                options.secure = true;\n                break;\n            case 'direct:':\n                options.direct = true;\n                break;\n        }\n\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n\n        if (url.auth) {\n            auth = url.auth.split(':');\n\n            if (!options.auth) {\n                options.auth = {};\n            }\n\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(':');\n        }\n\n        Object.keys(url.query || {}).forEach(key => {\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n\n            switch (value) {\n                case 'true':\n                    value = true;\n                    break;\n                case 'false':\n                    value = false;\n                    break;\n            }\n\n            // tls is nested object\n            if (key.indexOf('tls.') === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf('.') >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n\n    return options;\n};\n\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args) => {\n    let entry = {};\n\n    Object.keys(defaults || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = defaults[key];\n        }\n    });\n\n    Object.keys(data || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = data[key];\n        }\n    });\n\n    logger[level](entry, message, ...args);\n};\n\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\nmodule.exports.getLogger = (options, defaults) => {\n    options = options || {};\n\n    let response = {};\n    let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach(level => {\n            response[level] = () => false;\n        });\n        return response;\n    }\n\n    let logger = options.logger;\n\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n\n    levels.forEach(level => {\n        response[level] = (data, message, ...args) => {\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n\n    return response;\n};\n\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\nmodule.exports.callbackPromise = (resolve, reject) =>\n    function () {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\nmodule.exports.resolveContent = (data, key, callback) => {\n    let promise;\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n\n    let content = (data && data[key] && data[key].content) || data[key];\n    let contentStream;\n    let encoding = ((typeof data[key] === 'object' && data[key].encoding) || 'utf8')\n        .toString()\n        .toLowerCase()\n        .replace(/[-_\\s]/g, '');\n\n    if (!content) {\n        return callback(null, content);\n    }\n\n    if (typeof content === 'object') {\n        if (typeof content.pipe === 'function') {\n            return resolveStream(content, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n            if (!parts) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n\n    if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n\n    // default action, return as is\n    setImmediate(() => callback(null, content));\n\n    return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nmodule.exports.assign = function (/* target, ... sources */) {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n\n    args.forEach(source => {\n        Object.keys(source || {}).forEach(key => {\n            if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach(subKey => {\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\n\nmodule.exports.encodeXText = str => {\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = '';\n    for (let i = 0, len = buf.length; i < len; i++) {\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\nfunction resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n\n    stream.on('error', err => {\n        if (responded) {\n            return;\n        }\n\n        responded = true;\n        callback(err);\n    });\n\n    stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    stream.on('end', () => {\n        if (responded) {\n            return;\n        }\n        responded = true;\n\n        let value;\n\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\nfunction createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach(level => {\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n\n    levels.forEach(level => {\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += ' '.repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n\n    let print = (level, entry, message, ...args) => {\n        let prefix = '';\n        if (entry) {\n            if (entry.tnx === 'server') {\n                prefix = 'S: ';\n            } else if (entry.tnx === 'client') {\n                prefix = 'C: ';\n            }\n\n            if (entry.sid) {\n                prefix = '[' + entry.sid + '] ' + prefix;\n            }\n\n            if (entry.cid) {\n                prefix = '[#' + entry.cid + '] ' + prefix;\n            }\n        }\n\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach(line => {\n            console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n        });\n    };\n\n    let logger = {};\n    levels.forEach(level => {\n        logger[level] = print.bind(null, level);\n    });\n\n    return logger;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}